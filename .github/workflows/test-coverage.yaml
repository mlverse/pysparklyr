on:
  push:
    branches: main
  pull_request:
    branches: main

name: test-coverage

jobs:
  test-coverage:
    timeout-minutes: 30
    runs-on: ubuntu-latest
    name: ${{ matrix.config.name }}

    strategy:
      fail-fast: false
      matrix:
        config:
          - {spark: '4.0.1', pyspark: '4.0.1', hadoop: '3', scala: '2.13', python: '3.10', name: 'PySpark 4'}

    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      R_KEEP_PKG_SOURCE: yes
      SPARK_VERSION:   ${{ matrix.config.spark }}
      HADOOP_VERSION:  ${{ matrix.config.hadoop }}
      PYSPARK_VERSION: ${{ matrix.config.pyspark }}
      PYTHON_VERSION:  ${{ matrix.config.python }}
      SCALA_VERSION:   ${{ matrix.config.scala }}
      CODE_COVERAGE:   'true'

    steps:
      - uses: actions/checkout@v3

      - uses: r-lib/actions/setup-r@v2
        with:
          r-version: 'release'
          use-public-rspm: true

      - uses: r-lib/actions/setup-r-dependencies@v2
        with:
          extra-packages: |
            any::devtools
            any::arrow
            any::covr
          needs: check

      - name: Install uv
        uses: astral-sh/setup-uv@v6

      - name: Cache Spark
        id: cache-spark
        uses: actions/cache@v3
        with:
          path: /home/runner/spark/spark-${{ matrix.config.spark }}-bin-hadoop${{ matrix.config.hadoop }}
          key: sparklyr-spark-${{ matrix.config.spark }}-bin-hadoop${{ matrix.config.hadoop }}

      - name: Install Spark (via sparklyr)
        if: steps.cache-spark.outputs.cache-hit != 'true'
        run: |
          devtools::load_all()
          library(sparklyr)
          spark_install(
            version = Sys.getenv("SPARK_VERSION"),
            hadoop_version = Sys.getenv("HADOOP_VERSION")
            )
        shell: Rscript {0}

      - name: Cache Scala
        id: cache-scala
        uses: actions/cache@v4
        with:
          path: /home/runner/scala/
          key: scala-2

      - name: Install Scala (via sparklyr)
        if: steps.cache-scala.outputs.cache-hit != 'true'
        run: |
          sparklyr::download_scalac()
        shell: Rscript {0}

      - name: R Installed Packages
        run: |
          m_pkgs <- installed.packages()
          t_pkgs <- as.data.frame(m_pkgs, row.names = FALSE)
          print(t_pkgs[, c("Package", "Version")])
        shell: Rscript {0}


      - name: Test coverage
        run: |
          Sys.setenv("CODE_COVERAGE" = "true")
          devtools::load_all()
          covr::codecov(
            quiet = FALSE,
            clean = FALSE,
            install_path = file.path(Sys.getenv("RUNNER_TEMP"), "package")
          )
        shell: Rscript {0}

      - name: Show testthat output
        if: always()
        run: |
          ## --------------------------------------------------------------------
          find ${{ runner.temp }}/package -name 'testthat.Rout*' -exec cat '{}' \; || true
        shell: bash

      - name: Upload test results
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-test-failures
          path: ${{ runner.temp }}/package
          token: ${{ secrets.CODECOV_TOKEN }}
